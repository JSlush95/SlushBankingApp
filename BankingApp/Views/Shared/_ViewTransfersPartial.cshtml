@model BankingApp.Models.DisplayTransferInfoViewModel
@using BankingApp.Models
@functions {
    string GetTransactionType(string description)
    {
        if (description == "Deposit")
            return "Deposit - Bank";
        else if (description.StartsWith("Purchase"))
            return "Payment - Storefront";
        else if (description.StartsWith("Refund"))
            return "Refund - Storefront";
        else if (description == "Transfer")
            return "Transfer - Bank";
        else
            return "Unknown";
    }

    string GetFromAccount(TransactionRecord record)
    {
        if (record.Description == "Deposit")
            return $"{record.RecipientAccount.User.UserName} - ACCT ID #{record.RecipientAccount.AccountID}";
        else if (record.Description == "Transfer")
            return $"{record.SenderAccount.User.UserName} - ACCT ID #{record.SenderAccount.AccountID}";
        else if (record.Description.StartsWith("Purchase"))
            return record.SenderAccount.User.UserName;
        else if (record.Description.StartsWith("Refund"))
            return record.SenderAccount.User.UserName;
        else
            return "N/A";
    }

    string GetToAccount(TransactionRecord record)
    {
        if (record.Description == "Deposit")
            return $"{record.SenderAccount.User.UserName} - ACCT ID #{record.SenderAccount.AccountID}";
        else if (record.Description == "Transfer")
            return $"{record.RecipientAccount.User.UserName} - ACCT ID #{record.RecipientAccount.AccountID}";
        else if (record.Description.StartsWith("Purchase"))
            return $"{GetPaymentRecipient(record.Description)}";
        else if (record.Description.StartsWith("Refund"))
            return $"{record.RecipientAccount.User.UserName} - ACCT ID #{record.RecipientAccount.AccountID}";
        else
            return "N/A";
    }

    string GetPaymentRecipient(string description)
    {
        return description.Replace("Purchase - ", "");
    }
}
@if (Model.Transactions == null || !Model.Transactions.Any())
{
    <div class="alert alert-light" role="alert">
        Could not find any transfer data. Please create some.
    </div>
}
else
{
    <div class="overflow-auto" style="max-height: 600px; border: 1px solid #ddd; padding: 8px;">
        <table class="table table-striped table-hover table-success">
            <thead>
                <tr class="table-dark">
                    <th scope="col">Transaction Type</th>
                    <th scope="col">From Account</th>
                    <th scope="col">To Account</th>
                    <th scope="col">Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in Model.Transactions)
                {
                    <tr>
                        <td>@GetTransactionType(record.Description)</td>
                        <td>@GetFromAccount(record)</td>
                        <td>@GetToAccount(record)</td>
                        <td>@record.Amount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}